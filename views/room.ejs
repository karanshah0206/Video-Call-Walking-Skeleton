<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <title>Video Call Walking Skeleton</title>

    <script>
        const roomId = "<%= roomId %>"
    </script>

    <style>
        * {
            margin: 0;
            padding: 0;
        }
        #video-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, 300px);
            grid-auto-rows: 300px;
        }

        video {
            width: 100%;
            height: 100%;
            object-fit: cover;
            background-color: black;
        }
    </style>
</head>
<body>
    <div id="video-grid"></div>

    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdn.socket.io/socket.io-1.4.5.js"></script>
    <script>
        var socket = io();
        const videoGrid = document.getElementById('video-grid');
        const myPeer = new Peer(undefined, {
            host: '/',
            port: '3001'
        })

        const myVideo = document.createElement('video');
        myVideo.muted = true;

        const peers = {};

        navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        }).then(stream => {
            addMyVideo(myVideo, stream);

            myPeer.on('call', call => {
                call.answer(stream);
                const video = document.createElement('video');
                call.on('stream', userVideoStream => {
                    addMyVideo(video, userVideoStream);
                })
            })

            socket.on('user-connected', userId => {
                connectToNewuser(userId, stream);
            })
        })
        
        socket.on('user-disconnected', userId => {
            if (peers[userId])
                peers[userId].close();
        })

        myPeer.on('open', id => {
            socket.emit('join-room', roomId, id);
        })

        function connectToNewuser (userId, stream) {
            var call = myPeer.call(userId, stream);
            const video = document.createElement('video');
            call.on('stream', userVideoStream => {
                addMyVideo(video, userVideoStream);
            })
            call.on('close', () => {
                video.remove();
            })

            peers[userId] = call;
        }

        function addMyVideo (video, stream) {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            })
            videoGrid.appendChild(video);
        }
    </script>
</body>
</html>